import { LoginStateEnum } from "@propel-auth-fern/fe_v2-client/api";
import { Dispatch, MouseEvent, SetStateAction, SyntheticEvent, useState } from "react";
import { apiVerifyMfa } from "../api";
import { Alert, Container, Image, Input, Button, H3, Paragraph } from "../elements";
import { useConfig } from "../state";
import { Appearance } from "../utils";

export type VerifyProps = {
  setStep: Dispatch<SetStateAction<LoginStateEnum>>;
  appearance?: VerifyAppearance;
};

export type VerifyAppearance = {
  options?: {
    headerText?: string;
    displayLogo?: boolean;
  };
  elements?: {
    Container?: Appearance;
    Logo?: Appearance;
    Header?: Appearance;
    InstructionText?: Appearance;
    CodeInput?: Appearance;
    SubmitButton?: Appearance;
    CodeTypeLink?: Appearance;
    Alert?: Appearance;
  };
};

export const Verify = ({ setStep, appearance }: VerifyProps) => {
  const [loading, setLoading] = useState(false);
  const [code, setCode] = useState("");
  const [useBackupCode, setUseBackupCode] = useState(false);
  const [error, setError] = useState<string | undefined>(undefined);
  const { config } = useConfig();

  const codeLabel = `Enter the 6 digit code generated by your authenticator app:`;
  const backupCodeLabel = `Enter an unused backup code:`;
  const inputLabel = useBackupCode ? backupCodeLabel : codeLabel;

  const codeButtonText = `Enter a code from your authenticator app`;
  const backupCodeButtonText = `Lost your device? Enter a backup code`;
  const buttonText = useBackupCode ? codeButtonText : backupCodeButtonText;

  function toggleCodeType(e: MouseEvent<HTMLButtonElement>) {
    e.preventDefault();
    setCode("");
    setError(undefined);
    setUseBackupCode(!useBackupCode);
  }

  async function verifyMfa(e: SyntheticEvent) {
    try {
      e.preventDefault();
      setLoading(true);
      setError(undefined);
      const options = { code };
      // const response = await apiVerifyMfa(options);
      // if (response.ok) ..
      setStep(LoginStateEnum.UserMetadataRequired);
    } catch (e) {
      console.error(e);
    } finally {
      setLoading(false);
    }
  }

  return (
    <Container className={"pa_container"} appearance={appearance?.elements?.Container}>
      {appearance?.options?.displayLogo && (
        <div className="pa_logo-container">
          <Image
            src={config.logo_url}
            alt={config.site_display_name}
            appearance={appearance?.elements?.Logo}
            className={"pa_logo"}
          />
        </div>
      )}
      <H3 appearance={appearance?.elements?.Header}>{appearance?.options?.headerText || "Verify"}</H3>
      <form onSubmit={verifyMfa}>
        <Paragraph appearance={appearance?.elements?.InstructionText}>{inputLabel}</Paragraph>
        <div>
          <Input
            type={"text"}
            placeholder={"123456"}
            value={code}
            onChange={(e) => setCode(e.target.value)}
            appearance={appearance?.elements?.CodeInput}
            className={"pa_input"}
          />
        </div>
        <Button
          loading={loading}
          appearance={appearance?.elements?.SubmitButton}
          className={"pa_button pa_button--action"}
        >
          Submit
        </Button>
        {error && (
          <Alert appearance={appearance?.elements?.Alert} type={"error"}>
            {error}
          </Alert>
        )}
      </form>
      <div className="pa_bottom-links">
        <Button
          onClick={toggleCodeType}
          appearance={appearance?.elements?.CodeTypeLink}
          className={"pa_button pa_button--minimal"}
        >
          {buttonText}
        </Button>
      </div>
    </Container>
  );
};
